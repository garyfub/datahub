package DataHub;
/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DHForeignKey implements org.apache.thrift.TBase<DHForeignKey, DHForeignKey._Fields>, java.io.Serializable, Cloneable, Comparable<DHForeignKey> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DHForeignKey");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField VERSION_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("version_number", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FIELD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("field_name", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DHForeignKeyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DHForeignKeyTupleSchemeFactory());
  }

  public int id; // optional
  public int version_number; // optional
  public String table_name; // optional
  public String field_name; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    VERSION_NUMBER((short)2, "version_number"),
    TABLE_NAME((short)3, "table_name"),
    FIELD_NAME((short)4, "field_name");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // VERSION_NUMBER
          return VERSION_NUMBER;
        case 3: // TABLE_NAME
          return TABLE_NAME;
        case 4: // FIELD_NAME
          return FIELD_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __VERSION_NUMBER_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ID,_Fields.VERSION_NUMBER,_Fields.TABLE_NAME,_Fields.FIELD_NAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VERSION_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("version_number", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIELD_NAME, new org.apache.thrift.meta_data.FieldMetaData("field_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DHForeignKey.class, metaDataMap);
  }

  public DHForeignKey() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DHForeignKey(DHForeignKey other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.version_number = other.version_number;
    if (other.isSetTable_name()) {
      this.table_name = other.table_name;
    }
    if (other.isSetField_name()) {
      this.field_name = other.field_name;
    }
  }

  public DHForeignKey deepCopy() {
    return new DHForeignKey(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setVersion_numberIsSet(false);
    this.version_number = 0;
    this.table_name = null;
    this.field_name = null;
  }

  public int getId() {
    return this.id;
  }

  public DHForeignKey setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getVersion_number() {
    return this.version_number;
  }

  public DHForeignKey setVersion_number(int version_number) {
    this.version_number = version_number;
    setVersion_numberIsSet(true);
    return this;
  }

  public void unsetVersion_number() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_NUMBER_ISSET_ID);
  }

  /** Returns true if field version_number is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion_number() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_NUMBER_ISSET_ID);
  }

  public void setVersion_numberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_NUMBER_ISSET_ID, value);
  }

  public String getTable_name() {
    return this.table_name;
  }

  public DHForeignKey setTable_name(String table_name) {
    this.table_name = table_name;
    return this;
  }

  public void unsetTable_name() {
    this.table_name = null;
  }

  /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_name() {
    return this.table_name != null;
  }

  public void setTable_nameIsSet(boolean value) {
    if (!value) {
      this.table_name = null;
    }
  }

  public String getField_name() {
    return this.field_name;
  }

  public DHForeignKey setField_name(String field_name) {
    this.field_name = field_name;
    return this;
  }

  public void unsetField_name() {
    this.field_name = null;
  }

  /** Returns true if field field_name is set (has been assigned a value) and false otherwise */
  public boolean isSetField_name() {
    return this.field_name != null;
  }

  public void setField_nameIsSet(boolean value) {
    if (!value) {
      this.field_name = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case VERSION_NUMBER:
      if (value == null) {
        unsetVersion_number();
      } else {
        setVersion_number((Integer)value);
      }
      break;

    case TABLE_NAME:
      if (value == null) {
        unsetTable_name();
      } else {
        setTable_name((String)value);
      }
      break;

    case FIELD_NAME:
      if (value == null) {
        unsetField_name();
      } else {
        setField_name((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case VERSION_NUMBER:
      return Integer.valueOf(getVersion_number());

    case TABLE_NAME:
      return getTable_name();

    case FIELD_NAME:
      return getField_name();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case VERSION_NUMBER:
      return isSetVersion_number();
    case TABLE_NAME:
      return isSetTable_name();
    case FIELD_NAME:
      return isSetField_name();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DHForeignKey)
      return this.equals((DHForeignKey)that);
    return false;
  }

  public boolean equals(DHForeignKey that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_version_number = true && this.isSetVersion_number();
    boolean that_present_version_number = true && that.isSetVersion_number();
    if (this_present_version_number || that_present_version_number) {
      if (!(this_present_version_number && that_present_version_number))
        return false;
      if (this.version_number != that.version_number)
        return false;
    }

    boolean this_present_table_name = true && this.isSetTable_name();
    boolean that_present_table_name = true && that.isSetTable_name();
    if (this_present_table_name || that_present_table_name) {
      if (!(this_present_table_name && that_present_table_name))
        return false;
      if (!this.table_name.equals(that.table_name))
        return false;
    }

    boolean this_present_field_name = true && this.isSetField_name();
    boolean that_present_field_name = true && that.isSetField_name();
    if (this_present_field_name || that_present_field_name) {
      if (!(this_present_field_name && that_present_field_name))
        return false;
      if (!this.field_name.equals(that.field_name))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(DHForeignKey other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion_number()).compareTo(other.isSetVersion_number());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion_number()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version_number, other.version_number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(other.isSetTable_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField_name()).compareTo(other.isSetField_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field_name, other.field_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DHForeignKey(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetVersion_number()) {
      if (!first) sb.append(", ");
      sb.append("version_number:");
      sb.append(this.version_number);
      first = false;
    }
    if (isSetTable_name()) {
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
    }
    if (isSetField_name()) {
      if (!first) sb.append(", ");
      sb.append("field_name:");
      if (this.field_name == null) {
        sb.append("null");
      } else {
        sb.append(this.field_name);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DHForeignKeyStandardSchemeFactory implements SchemeFactory {
    public DHForeignKeyStandardScheme getScheme() {
      return new DHForeignKeyStandardScheme();
    }
  }

  private static class DHForeignKeyStandardScheme extends StandardScheme<DHForeignKey> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DHForeignKey struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VERSION_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version_number = iprot.readI32();
              struct.setVersion_numberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table_name = iprot.readString();
              struct.setTable_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FIELD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.field_name = iprot.readString();
              struct.setField_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DHForeignKey struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVersion_number()) {
        oprot.writeFieldBegin(VERSION_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.version_number);
        oprot.writeFieldEnd();
      }
      if (struct.table_name != null) {
        if (struct.isSetTable_name()) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.field_name != null) {
        if (struct.isSetField_name()) {
          oprot.writeFieldBegin(FIELD_NAME_FIELD_DESC);
          oprot.writeString(struct.field_name);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DHForeignKeyTupleSchemeFactory implements SchemeFactory {
    public DHForeignKeyTupleScheme getScheme() {
      return new DHForeignKeyTupleScheme();
    }
  }

  private static class DHForeignKeyTupleScheme extends TupleScheme<DHForeignKey> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DHForeignKey struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetVersion_number()) {
        optionals.set(1);
      }
      if (struct.isSetTable_name()) {
        optionals.set(2);
      }
      if (struct.isSetField_name()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetVersion_number()) {
        oprot.writeI32(struct.version_number);
      }
      if (struct.isSetTable_name()) {
        oprot.writeString(struct.table_name);
      }
      if (struct.isSetField_name()) {
        oprot.writeString(struct.field_name);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DHForeignKey struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.version_number = iprot.readI32();
        struct.setVersion_numberIsSet(true);
      }
      if (incoming.get(2)) {
        struct.table_name = iprot.readString();
        struct.setTable_nameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.field_name = iprot.readString();
        struct.setField_nameIsSet(true);
      }
    }
  }

}

