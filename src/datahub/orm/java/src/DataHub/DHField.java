package DataHub;
/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DHField implements org.apache.thrift.TBase<DHField, DHField._Fields>, java.io.Serializable, Cloneable, Comparable<DHField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DHField");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField VERSION_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("version_number", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField DEFAULT_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("default_val", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField INDEXES_FIELD_DESC = new org.apache.thrift.protocol.TField("indexes", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField NULL_ALLOWED_FIELD_DESC = new org.apache.thrift.protocol.TField("null_allowed", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField AUTO_INCREMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("auto_increment", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("order", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField REFERENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("reference", org.apache.thrift.protocol.TType.STRUCT, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DHFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DHFieldTupleSchemeFactory());
  }

  public int id; // optional
  public int version_number; // optional
  public String name; // optional
  /**
   * 
   * @see DHType
   */
  public DHType type; // optional
  public int length; // optional
  public DHDefault default_val; // optional
  public List<DHIndex> indexes; // optional
  public boolean null_allowed; // optional
  public boolean auto_increment; // optional
  public DHOrder order; // optional
  public DHForeignKey reference; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    VERSION_NUMBER((short)2, "version_number"),
    NAME((short)3, "name"),
    /**
     * 
     * @see DHType
     */
    TYPE((short)4, "type"),
    LENGTH((short)5, "length"),
    DEFAULT_VAL((short)6, "default_val"),
    INDEXES((short)7, "indexes"),
    NULL_ALLOWED((short)8, "null_allowed"),
    AUTO_INCREMENT((short)9, "auto_increment"),
    ORDER((short)10, "order"),
    REFERENCE((short)11, "reference");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // VERSION_NUMBER
          return VERSION_NUMBER;
        case 3: // NAME
          return NAME;
        case 4: // TYPE
          return TYPE;
        case 5: // LENGTH
          return LENGTH;
        case 6: // DEFAULT_VAL
          return DEFAULT_VAL;
        case 7: // INDEXES
          return INDEXES;
        case 8: // NULL_ALLOWED
          return NULL_ALLOWED;
        case 9: // AUTO_INCREMENT
          return AUTO_INCREMENT;
        case 10: // ORDER
          return ORDER;
        case 11: // REFERENCE
          return REFERENCE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __VERSION_NUMBER_ISSET_ID = 1;
  private static final int __LENGTH_ISSET_ID = 2;
  private static final int __NULL_ALLOWED_ISSET_ID = 3;
  private static final int __AUTO_INCREMENT_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ID,_Fields.VERSION_NUMBER,_Fields.NAME,_Fields.TYPE,_Fields.LENGTH,_Fields.DEFAULT_VAL,_Fields.INDEXES,_Fields.NULL_ALLOWED,_Fields.AUTO_INCREMENT,_Fields.ORDER,_Fields.REFERENCE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VERSION_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("version_number", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DHType.class)));
    tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEFAULT_VAL, new org.apache.thrift.meta_data.FieldMetaData("default_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DHDefault.class)));
    tmpMap.put(_Fields.INDEXES, new org.apache.thrift.meta_data.FieldMetaData("indexes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DHIndex.class))));
    tmpMap.put(_Fields.NULL_ALLOWED, new org.apache.thrift.meta_data.FieldMetaData("null_allowed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.AUTO_INCREMENT, new org.apache.thrift.meta_data.FieldMetaData("auto_increment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ORDER, new org.apache.thrift.meta_data.FieldMetaData("order", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DHOrder.class)));
    tmpMap.put(_Fields.REFERENCE, new org.apache.thrift.meta_data.FieldMetaData("reference", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DHForeignKey.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DHField.class, metaDataMap);
  }

  public DHField() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DHField(DHField other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.version_number = other.version_number;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.length = other.length;
    if (other.isSetDefault_val()) {
      this.default_val = new DHDefault(other.default_val);
    }
    if (other.isSetIndexes()) {
      List<DHIndex> __this__indexes = new ArrayList<DHIndex>(other.indexes.size());
      for (DHIndex other_element : other.indexes) {
        __this__indexes.add(new DHIndex(other_element));
      }
      this.indexes = __this__indexes;
    }
    this.null_allowed = other.null_allowed;
    this.auto_increment = other.auto_increment;
    if (other.isSetOrder()) {
      this.order = new DHOrder(other.order);
    }
    if (other.isSetReference()) {
      this.reference = new DHForeignKey(other.reference);
    }
  }

  public DHField deepCopy() {
    return new DHField(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setVersion_numberIsSet(false);
    this.version_number = 0;
    this.name = null;
    this.type = null;
    setLengthIsSet(false);
    this.length = 0;
    this.default_val = null;
    this.indexes = null;
    setNull_allowedIsSet(false);
    this.null_allowed = false;
    setAuto_incrementIsSet(false);
    this.auto_increment = false;
    this.order = null;
    this.reference = null;
  }

  public int getId() {
    return this.id;
  }

  public DHField setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getVersion_number() {
    return this.version_number;
  }

  public DHField setVersion_number(int version_number) {
    this.version_number = version_number;
    setVersion_numberIsSet(true);
    return this;
  }

  public void unsetVersion_number() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_NUMBER_ISSET_ID);
  }

  /** Returns true if field version_number is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion_number() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_NUMBER_ISSET_ID);
  }

  public void setVersion_numberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_NUMBER_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public DHField setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * 
   * @see DHType
   */
  public DHType getType() {
    return this.type;
  }

  /**
   * 
   * @see DHType
   */
  public DHField setType(DHType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getLength() {
    return this.length;
  }

  public DHField setLength(int length) {
    this.length = length;
    setLengthIsSet(true);
    return this;
  }

  public void unsetLength() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENGTH_ISSET_ID);
  }

  /** Returns true if field length is set (has been assigned a value) and false otherwise */
  public boolean isSetLength() {
    return EncodingUtils.testBit(__isset_bitfield, __LENGTH_ISSET_ID);
  }

  public void setLengthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENGTH_ISSET_ID, value);
  }

  public DHDefault getDefault_val() {
    return this.default_val;
  }

  public DHField setDefault_val(DHDefault default_val) {
    this.default_val = default_val;
    return this;
  }

  public void unsetDefault_val() {
    this.default_val = null;
  }

  /** Returns true if field default_val is set (has been assigned a value) and false otherwise */
  public boolean isSetDefault_val() {
    return this.default_val != null;
  }

  public void setDefault_valIsSet(boolean value) {
    if (!value) {
      this.default_val = null;
    }
  }

  public int getIndexesSize() {
    return (this.indexes == null) ? 0 : this.indexes.size();
  }

  public java.util.Iterator<DHIndex> getIndexesIterator() {
    return (this.indexes == null) ? null : this.indexes.iterator();
  }

  public void addToIndexes(DHIndex elem) {
    if (this.indexes == null) {
      this.indexes = new ArrayList<DHIndex>();
    }
    this.indexes.add(elem);
  }

  public List<DHIndex> getIndexes() {
    return this.indexes;
  }

  public DHField setIndexes(List<DHIndex> indexes) {
    this.indexes = indexes;
    return this;
  }

  public void unsetIndexes() {
    this.indexes = null;
  }

  /** Returns true if field indexes is set (has been assigned a value) and false otherwise */
  public boolean isSetIndexes() {
    return this.indexes != null;
  }

  public void setIndexesIsSet(boolean value) {
    if (!value) {
      this.indexes = null;
    }
  }

  public boolean isNull_allowed() {
    return this.null_allowed;
  }

  public DHField setNull_allowed(boolean null_allowed) {
    this.null_allowed = null_allowed;
    setNull_allowedIsSet(true);
    return this;
  }

  public void unsetNull_allowed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NULL_ALLOWED_ISSET_ID);
  }

  /** Returns true if field null_allowed is set (has been assigned a value) and false otherwise */
  public boolean isSetNull_allowed() {
    return EncodingUtils.testBit(__isset_bitfield, __NULL_ALLOWED_ISSET_ID);
  }

  public void setNull_allowedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NULL_ALLOWED_ISSET_ID, value);
  }

  public boolean isAuto_increment() {
    return this.auto_increment;
  }

  public DHField setAuto_increment(boolean auto_increment) {
    this.auto_increment = auto_increment;
    setAuto_incrementIsSet(true);
    return this;
  }

  public void unsetAuto_increment() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AUTO_INCREMENT_ISSET_ID);
  }

  /** Returns true if field auto_increment is set (has been assigned a value) and false otherwise */
  public boolean isSetAuto_increment() {
    return EncodingUtils.testBit(__isset_bitfield, __AUTO_INCREMENT_ISSET_ID);
  }

  public void setAuto_incrementIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AUTO_INCREMENT_ISSET_ID, value);
  }

  public DHOrder getOrder() {
    return this.order;
  }

  public DHField setOrder(DHOrder order) {
    this.order = order;
    return this;
  }

  public void unsetOrder() {
    this.order = null;
  }

  /** Returns true if field order is set (has been assigned a value) and false otherwise */
  public boolean isSetOrder() {
    return this.order != null;
  }

  public void setOrderIsSet(boolean value) {
    if (!value) {
      this.order = null;
    }
  }

  public DHForeignKey getReference() {
    return this.reference;
  }

  public DHField setReference(DHForeignKey reference) {
    this.reference = reference;
    return this;
  }

  public void unsetReference() {
    this.reference = null;
  }

  /** Returns true if field reference is set (has been assigned a value) and false otherwise */
  public boolean isSetReference() {
    return this.reference != null;
  }

  public void setReferenceIsSet(boolean value) {
    if (!value) {
      this.reference = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case VERSION_NUMBER:
      if (value == null) {
        unsetVersion_number();
      } else {
        setVersion_number((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((DHType)value);
      }
      break;

    case LENGTH:
      if (value == null) {
        unsetLength();
      } else {
        setLength((Integer)value);
      }
      break;

    case DEFAULT_VAL:
      if (value == null) {
        unsetDefault_val();
      } else {
        setDefault_val((DHDefault)value);
      }
      break;

    case INDEXES:
      if (value == null) {
        unsetIndexes();
      } else {
        setIndexes((List<DHIndex>)value);
      }
      break;

    case NULL_ALLOWED:
      if (value == null) {
        unsetNull_allowed();
      } else {
        setNull_allowed((Boolean)value);
      }
      break;

    case AUTO_INCREMENT:
      if (value == null) {
        unsetAuto_increment();
      } else {
        setAuto_increment((Boolean)value);
      }
      break;

    case ORDER:
      if (value == null) {
        unsetOrder();
      } else {
        setOrder((DHOrder)value);
      }
      break;

    case REFERENCE:
      if (value == null) {
        unsetReference();
      } else {
        setReference((DHForeignKey)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case VERSION_NUMBER:
      return Integer.valueOf(getVersion_number());

    case NAME:
      return getName();

    case TYPE:
      return getType();

    case LENGTH:
      return Integer.valueOf(getLength());

    case DEFAULT_VAL:
      return getDefault_val();

    case INDEXES:
      return getIndexes();

    case NULL_ALLOWED:
      return Boolean.valueOf(isNull_allowed());

    case AUTO_INCREMENT:
      return Boolean.valueOf(isAuto_increment());

    case ORDER:
      return getOrder();

    case REFERENCE:
      return getReference();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case VERSION_NUMBER:
      return isSetVersion_number();
    case NAME:
      return isSetName();
    case TYPE:
      return isSetType();
    case LENGTH:
      return isSetLength();
    case DEFAULT_VAL:
      return isSetDefault_val();
    case INDEXES:
      return isSetIndexes();
    case NULL_ALLOWED:
      return isSetNull_allowed();
    case AUTO_INCREMENT:
      return isSetAuto_increment();
    case ORDER:
      return isSetOrder();
    case REFERENCE:
      return isSetReference();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DHField)
      return this.equals((DHField)that);
    return false;
  }

  public boolean equals(DHField that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_version_number = true && this.isSetVersion_number();
    boolean that_present_version_number = true && that.isSetVersion_number();
    if (this_present_version_number || that_present_version_number) {
      if (!(this_present_version_number && that_present_version_number))
        return false;
      if (this.version_number != that.version_number)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_length = true && this.isSetLength();
    boolean that_present_length = true && that.isSetLength();
    if (this_present_length || that_present_length) {
      if (!(this_present_length && that_present_length))
        return false;
      if (this.length != that.length)
        return false;
    }

    boolean this_present_default_val = true && this.isSetDefault_val();
    boolean that_present_default_val = true && that.isSetDefault_val();
    if (this_present_default_val || that_present_default_val) {
      if (!(this_present_default_val && that_present_default_val))
        return false;
      if (!this.default_val.equals(that.default_val))
        return false;
    }

    boolean this_present_indexes = true && this.isSetIndexes();
    boolean that_present_indexes = true && that.isSetIndexes();
    if (this_present_indexes || that_present_indexes) {
      if (!(this_present_indexes && that_present_indexes))
        return false;
      if (!this.indexes.equals(that.indexes))
        return false;
    }

    boolean this_present_null_allowed = true && this.isSetNull_allowed();
    boolean that_present_null_allowed = true && that.isSetNull_allowed();
    if (this_present_null_allowed || that_present_null_allowed) {
      if (!(this_present_null_allowed && that_present_null_allowed))
        return false;
      if (this.null_allowed != that.null_allowed)
        return false;
    }

    boolean this_present_auto_increment = true && this.isSetAuto_increment();
    boolean that_present_auto_increment = true && that.isSetAuto_increment();
    if (this_present_auto_increment || that_present_auto_increment) {
      if (!(this_present_auto_increment && that_present_auto_increment))
        return false;
      if (this.auto_increment != that.auto_increment)
        return false;
    }

    boolean this_present_order = true && this.isSetOrder();
    boolean that_present_order = true && that.isSetOrder();
    if (this_present_order || that_present_order) {
      if (!(this_present_order && that_present_order))
        return false;
      if (!this.order.equals(that.order))
        return false;
    }

    boolean this_present_reference = true && this.isSetReference();
    boolean that_present_reference = true && that.isSetReference();
    if (this_present_reference || that_present_reference) {
      if (!(this_present_reference && that_present_reference))
        return false;
      if (!this.reference.equals(that.reference))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(DHField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion_number()).compareTo(other.isSetVersion_number());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion_number()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version_number, other.version_number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLength()).compareTo(other.isSetLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, other.length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefault_val()).compareTo(other.isSetDefault_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefault_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.default_val, other.default_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndexes()).compareTo(other.isSetIndexes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndexes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indexes, other.indexes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNull_allowed()).compareTo(other.isSetNull_allowed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNull_allowed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.null_allowed, other.null_allowed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuto_increment()).compareTo(other.isSetAuto_increment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuto_increment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auto_increment, other.auto_increment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrder()).compareTo(other.isSetOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.order, other.order);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReference()).compareTo(other.isSetReference());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReference()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference, other.reference);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DHField(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetVersion_number()) {
      if (!first) sb.append(", ");
      sb.append("version_number:");
      sb.append(this.version_number);
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetLength()) {
      if (!first) sb.append(", ");
      sb.append("length:");
      sb.append(this.length);
      first = false;
    }
    if (isSetDefault_val()) {
      if (!first) sb.append(", ");
      sb.append("default_val:");
      if (this.default_val == null) {
        sb.append("null");
      } else {
        sb.append(this.default_val);
      }
      first = false;
    }
    if (isSetIndexes()) {
      if (!first) sb.append(", ");
      sb.append("indexes:");
      if (this.indexes == null) {
        sb.append("null");
      } else {
        sb.append(this.indexes);
      }
      first = false;
    }
    if (isSetNull_allowed()) {
      if (!first) sb.append(", ");
      sb.append("null_allowed:");
      sb.append(this.null_allowed);
      first = false;
    }
    if (isSetAuto_increment()) {
      if (!first) sb.append(", ");
      sb.append("auto_increment:");
      sb.append(this.auto_increment);
      first = false;
    }
    if (isSetOrder()) {
      if (!first) sb.append(", ");
      sb.append("order:");
      if (this.order == null) {
        sb.append("null");
      } else {
        sb.append(this.order);
      }
      first = false;
    }
    if (isSetReference()) {
      if (!first) sb.append(", ");
      sb.append("reference:");
      if (this.reference == null) {
        sb.append("null");
      } else {
        sb.append(this.reference);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (reference != null) {
      reference.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DHFieldStandardSchemeFactory implements SchemeFactory {
    public DHFieldStandardScheme getScheme() {
      return new DHFieldStandardScheme();
    }
  }

  private static class DHFieldStandardScheme extends StandardScheme<DHField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DHField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VERSION_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version_number = iprot.readI32();
              struct.setVersion_numberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = DHType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.length = iprot.readI32();
              struct.setLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DEFAULT_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.default_val = new DHDefault();
              struct.default_val.read(iprot);
              struct.setDefault_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // INDEXES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.indexes = new ArrayList<DHIndex>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  DHIndex _elem2;
                  _elem2 = new DHIndex();
                  _elem2.read(iprot);
                  struct.indexes.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setIndexesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NULL_ALLOWED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.null_allowed = iprot.readBool();
              struct.setNull_allowedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // AUTO_INCREMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.auto_increment = iprot.readBool();
              struct.setAuto_incrementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.order = new DHOrder();
              struct.order.read(iprot);
              struct.setOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REFERENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.reference = new DHForeignKey();
              struct.reference.read(iprot);
              struct.setReferenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DHField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVersion_number()) {
        oprot.writeFieldBegin(VERSION_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.version_number);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLength()) {
        oprot.writeFieldBegin(LENGTH_FIELD_DESC);
        oprot.writeI32(struct.length);
        oprot.writeFieldEnd();
      }
      if (struct.default_val != null) {
        if (struct.isSetDefault_val()) {
          oprot.writeFieldBegin(DEFAULT_VAL_FIELD_DESC);
          struct.default_val.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.indexes != null) {
        if (struct.isSetIndexes()) {
          oprot.writeFieldBegin(INDEXES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.indexes.size()));
            for (DHIndex _iter3 : struct.indexes)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNull_allowed()) {
        oprot.writeFieldBegin(NULL_ALLOWED_FIELD_DESC);
        oprot.writeBool(struct.null_allowed);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAuto_increment()) {
        oprot.writeFieldBegin(AUTO_INCREMENT_FIELD_DESC);
        oprot.writeBool(struct.auto_increment);
        oprot.writeFieldEnd();
      }
      if (struct.order != null) {
        if (struct.isSetOrder()) {
          oprot.writeFieldBegin(ORDER_FIELD_DESC);
          struct.order.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.reference != null) {
        if (struct.isSetReference()) {
          oprot.writeFieldBegin(REFERENCE_FIELD_DESC);
          struct.reference.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DHFieldTupleSchemeFactory implements SchemeFactory {
    public DHFieldTupleScheme getScheme() {
      return new DHFieldTupleScheme();
    }
  }

  private static class DHFieldTupleScheme extends TupleScheme<DHField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DHField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetVersion_number()) {
        optionals.set(1);
      }
      if (struct.isSetName()) {
        optionals.set(2);
      }
      if (struct.isSetType()) {
        optionals.set(3);
      }
      if (struct.isSetLength()) {
        optionals.set(4);
      }
      if (struct.isSetDefault_val()) {
        optionals.set(5);
      }
      if (struct.isSetIndexes()) {
        optionals.set(6);
      }
      if (struct.isSetNull_allowed()) {
        optionals.set(7);
      }
      if (struct.isSetAuto_increment()) {
        optionals.set(8);
      }
      if (struct.isSetOrder()) {
        optionals.set(9);
      }
      if (struct.isSetReference()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetVersion_number()) {
        oprot.writeI32(struct.version_number);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetLength()) {
        oprot.writeI32(struct.length);
      }
      if (struct.isSetDefault_val()) {
        struct.default_val.write(oprot);
      }
      if (struct.isSetIndexes()) {
        {
          oprot.writeI32(struct.indexes.size());
          for (DHIndex _iter4 : struct.indexes)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetNull_allowed()) {
        oprot.writeBool(struct.null_allowed);
      }
      if (struct.isSetAuto_increment()) {
        oprot.writeBool(struct.auto_increment);
      }
      if (struct.isSetOrder()) {
        struct.order.write(oprot);
      }
      if (struct.isSetReference()) {
        struct.reference.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DHField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.version_number = iprot.readI32();
        struct.setVersion_numberIsSet(true);
      }
      if (incoming.get(2)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.type = DHType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.length = iprot.readI32();
        struct.setLengthIsSet(true);
      }
      if (incoming.get(5)) {
        struct.default_val = new DHDefault();
        struct.default_val.read(iprot);
        struct.setDefault_valIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.indexes = new ArrayList<DHIndex>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            DHIndex _elem7;
            _elem7 = new DHIndex();
            _elem7.read(iprot);
            struct.indexes.add(_elem7);
          }
        }
        struct.setIndexesIsSet(true);
      }
      if (incoming.get(7)) {
        struct.null_allowed = iprot.readBool();
        struct.setNull_allowedIsSet(true);
      }
      if (incoming.get(8)) {
        struct.auto_increment = iprot.readBool();
        struct.setAuto_incrementIsSet(true);
      }
      if (incoming.get(9)) {
        struct.order = new DHOrder();
        struct.order.read(iprot);
        struct.setOrderIsSet(true);
      }
      if (incoming.get(10)) {
        struct.reference = new DHForeignKey();
        struct.reference.read(iprot);
        struct.setReferenceIsSet(true);
      }
    }
  }

}

